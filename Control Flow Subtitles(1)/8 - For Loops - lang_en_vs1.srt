1
00:00:02,070 --> 00:00:05,675
Now that you've learned about conditional statements,

2
00:00:05,675 --> 00:00:07,303
let's move on to loops,

3
00:00:07,303 --> 00:00:10,150
which allow us to repeat blocks of code.

4
00:00:10,150 --> 00:00:12,365
Python has two kinds,

5
00:00:12,365 --> 00:00:15,160
for loops and while loops.

6
00:00:15,160 --> 00:00:17,832
Let's first take a look at the for loop,

7
00:00:17,832 --> 00:00:21,543
which we can use to iterate over an iterable.

8
00:00:21,543 --> 00:00:26,650
An iterable is an object that can return one of its elements at a time.

9
00:00:26,650 --> 00:00:30,550
This can include sequence types such as strings, lists,

10
00:00:30,550 --> 00:00:36,820
and tuples as well as non-sequenced types such as dictionaries and files.

11
00:00:36,820 --> 00:00:41,995
You can define objects within iter method to allow them to be used as an iterable,

12
00:00:41,995 --> 00:00:46,515
which you can find more information on in the notes below.

13
00:00:46,515 --> 00:00:50,300
Consider this for loop that iterates through a list of cities,

14
00:00:50,300 --> 00:00:53,845
capitalizes each one, and prints it.

15
00:00:53,845 --> 00:00:57,420
The for keyword signals that this is a for loop.

16
00:00:57,420 --> 00:01:03,115
Cities is the iterable and city is the loop's iteration variable.

17
00:01:03,115 --> 00:01:06,595
That is the variable that represents the element

18
00:01:06,595 --> 00:01:10,315
in the iterable that the loop is currently processing.

19
00:01:10,315 --> 00:01:12,604
So, in the first iteration,

20
00:01:12,604 --> 00:01:14,970
city would be New York City.

21
00:01:14,970 --> 00:01:16,900
In the second iteration,

22
00:01:16,900 --> 00:01:19,735
it would be Mountain View,and so on.

23
00:01:19,735 --> 00:01:22,930
We can use the city variable to refer to an element

24
00:01:22,930 --> 00:01:27,640
within the indented body of a for loop during any iteration.

25
00:01:27,640 --> 00:01:32,625
This indented body is executed once for each element in cities.

26
00:01:32,625 --> 00:01:35,440
You can name iteration variables however you

27
00:01:35,440 --> 00:01:39,910
like though this example demonstrates a common pattern.

28
00:01:39,910 --> 00:01:44,097
The name of the list cities is the plural form of city,

29
00:01:44,097 --> 00:01:46,330
the name of the iteration variable.

30
00:01:46,330 --> 00:01:50,515
Naming lists and iteration variables in this style makes it

31
00:01:50,515 --> 00:01:54,850
easier for other programmers to understand the purpose of each variable.

32
00:01:54,850 --> 00:01:59,545
So far, the loops we've written extract information from lists.

33
00:01:59,545 --> 00:02:04,135
We can also use for loops to create lists and to modify lists.

34
00:02:04,135 --> 00:02:05,970
To create a new list,

35
00:02:05,970 --> 00:02:07,690
we can start with an empty list,

36
00:02:07,690 --> 00:02:11,405
and then use the append method to add new items.

37
00:02:11,405 --> 00:02:18,450
This for loop iterates through each city and cities and appends it to capitalized cities.

38
00:02:18,450 --> 00:02:25,035
Modifying a list is a bit more involved and requires a use of a new function, range.

39
00:02:25,035 --> 00:02:30,490
Range is a built in function used to create immutable sequences of numbers.

40
00:02:30,490 --> 00:02:33,899
It has three arguments which must all be integers;

41
00:02:33,899 --> 00:02:37,195
start, stop, and step.

42
00:02:37,195 --> 00:02:40,000
Start is the first number of the sequence.

43
00:02:40,000 --> 00:02:43,390
Stop is one above the last number of the sequence.

44
00:02:43,390 --> 00:02:47,285
And step is the difference between the numbers in the sequence.

45
00:02:47,285 --> 00:02:52,900
If unspecified, start defaults to zero and step defaults to one.

46
00:02:52,900 --> 00:02:57,340
Calling range with one integer will make that the stop argument and

47
00:02:57,340 --> 00:03:02,405
return a sequence of numbers from zero to that integer minus one.

48
00:03:02,405 --> 00:03:07,785
So, range four returns zero through four minus one, which is three.

49
00:03:07,785 --> 00:03:12,765
Calling range with two integers will make those the start and stop,

50
00:03:12,765 --> 00:03:18,300
and return a sequence of numbers from the first number to the second number minus one.

51
00:03:18,300 --> 00:03:23,650
Range two, six returns a sequence from two to five.

52
00:03:23,650 --> 00:03:28,435
Calling range with three integers will return a sequence of numbers

53
00:03:28,435 --> 00:03:33,585
from the first to the second minus one separated by the third.

54
00:03:33,585 --> 00:03:35,335
So, range 1, 10,

55
00:03:35,335 --> 00:03:40,810
2 returns a sequence from one to nine incremented by two.

56
00:03:40,810 --> 00:03:43,285
Notice in these examples,

57
00:03:43,285 --> 00:03:46,650
we adopt range in a list before printing it.

58
00:03:46,650 --> 00:03:52,355
This is because printing just the output of range only shows you a range object.

59
00:03:52,355 --> 00:03:55,510
You can view the values in the range object by

60
00:03:55,510 --> 00:03:59,985
converting it to a list or iterating through it in a for loop.

61
00:03:59,985 --> 00:04:02,240
Back in our cities example,

62
00:04:02,240 --> 00:04:08,775
we can use the range function to generate the indices of each value in the cities list.

63
00:04:08,775 --> 00:04:13,940
This lets us access the elements of the list with cities bracket index.

64
00:04:13,940 --> 00:04:18,205
So, that we can modify the values in the cities list in place.

65
00:04:18,205 --> 00:04:20,990
Let's go through one iteration of this to

66
00:04:20,990 --> 00:04:24,240
show exactly how all these pieces work together.

67
00:04:24,240 --> 00:04:26,800
Len cities provides four,

68
00:04:26,800 --> 00:04:31,280
so the list will be a range from zero to three.

69
00:04:31,280 --> 00:04:35,710
The index will take on each of these values one at a time.

70
00:04:35,710 --> 00:04:37,310
So, in this first iteration,

71
00:04:37,310 --> 00:04:39,520
we'll have an index of zero.

72
00:04:39,520 --> 00:04:44,475
This part here will then index the first city, New York City,

73
00:04:44,475 --> 00:04:46,802
capitalize it using title,

74
00:04:46,802 --> 00:04:51,455
then place it back in place of the original New York City spot.

75
00:04:51,455 --> 00:04:56,000
This same process would then occur for each of the additional cities.

76
00:04:56,000 --> 00:05:01,690
We can use print to see the change in the cities list at each iteration.

77
00:05:01,690 --> 00:05:05,706
By getting a list of indices with the range function,

78
00:05:05,706 --> 00:05:11,480
we were able to index into each element of a list in a for loop to apply a change.

79
00:05:11,480 --> 00:05:15,720
While this modification is one application of the range function,

80
00:05:15,720 --> 00:05:18,285
that isn't the only thing it's useful for.

81
00:05:18,285 --> 00:05:23,000
You will frequently use range to repeat an action a certain number of times.
